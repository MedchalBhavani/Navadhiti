{
"admin": [
{
"name": "Admin",
"email": "admin@example.com",
"password": "admin123",
"phone": "9999999999",
"empId": "A001",
"role": "admin",
"id": "1"
},
{
"name": "Admin2",
"email": "admin2@example.com",
"password": "admin1234",
"phone": "1234567890",
"empId": "E001",
"role": "admin",
"id": "2"
}
],
"employees": [
{
"name": "alicee",
"email": "alicee@example.com",
"password": "alice1234",
"phone": "1234567890",
"empId": "E001",
"role": "employee",
"id": "2"
},
{
"name": "Bob",
"email": "bob@example.com",
"password": "bob6666",
"phone": "9876543210",
"empId": "E002",
"role": "employee",
"id": "3"
},
{
"id": "f372",
"name": "1111",
"email": "1111@1111",
"phone": "1111",
"empId": "1111",
"password": "emp123",
"role": "employee"
},
{
"id": "5850",
"name": "sudha",
"email": "sudha@gmail.com ",
"phone": "8646465464",
"empId": "5555",
"password": "emp123",
"role": "employee"
}
]
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>Employee Management Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="style.css" />
</head>

<body class="bg-light">

    <!-- LOGIN SECTION -->
    <div class="container" id="loginSection">
        <div class="row justify-content-center align-items-center vh-100">
            <div class="col-md-5">
                <div class="card shadow-lg p-4 rounded-4">
                    <h3 class="text-center mb-4 fw-bold text-primary">Login Portal</h3>
                    <form id="loginForm">
                        <input type="email" id="email" class="form-control mb-3" placeholder="Email" required />
                        <input type="password" id="password" class="form-control mb-3" placeholder="Password"
                            required />
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- DASHBOARD SECTION -->
    <div class="container my-4 d-none" id="dashboardSection">
        <!-- Header -->
        <nav class="navbar bg-white shadow-sm rounded mb-4 px-4 py-2">
            <div class="container-fluid d-flex justify-content-between align-items-center">
                <span class="navbar-brand fw-bold fs-4">👋 Welcome, <span id="userName"></span></span>
                <button class="btn btn-outline-danger btn-sm" onclick="logout()">Logout</button>
            </div>
        </nav>

        <!-- Profile -->
        <div class="card shadow-sm mb-4 p-4" id="profileSection"></div>

        <!-- Change Password -->
        <div class="card shadow-sm mb-4 p-4 d-none" id="passwordChangeSection">
            <h6 class="mb-3 fw-semibold">Change Password</h6>
            <input type="password" id="newPassword" class="form-control mb-2" placeholder="New password" />
            <button class="btn btn-primary btn-sm" onclick="changePassword()">Update</button>
        </div>

        <!-- Admin Controls -->
        <div id="adminControls" class="d-none">
            <div class="card shadow-sm mb-4 p-4">
                <h5 class="fw-bold mb-3">➕ Add New Employee</h5>
                <form id="addForm" class="row g-2">
                    <div class="col-md-3">
                        <input class="form-control" placeholder="Name" id="newName" required />
                    </div>
                    <div class="col-md-3">
                        <input class="form-control" placeholder="Email" id="newEmail" required />
                    </div>
                    <div class="col-md-3">
                        <input class="form-control" placeholder="Phone" id="newPhone" required />
                    </div>
                    <div class="col-md-2">
                        <input class="form-control" placeholder="Emp ID" id="newEmpId" required />
                    </div>
                    <div class="col-md-1 d-grid">
                        <button type="submit" class="btn btn-success">Add</button>
                    </div>
                </form>
            </div>

            <!-- Search -->
            <div class="mb-4">
                <input type="text" id="search" class="form-control shadow-sm"
                    placeholder="🔍 Search by name, email, or ID" />
            </div>
        </div>

        <!-- Employee Table -->
        <div class="table-responsive">
            <table class="table table-bordered table-hover table-striped shadow-sm align-middle text-center">
                <thead class="table-dark">
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Emp ID</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="employeeTableBody"></tbody>
            </table>
        </div>
    </div>

    <!-- JavaScript -->
    <script src="script.js"></script>
</body>

</html>



/*
let employees = [];
let currentUser = null;

// Fetch employees from JSON Server on load
fetch('http://localhost:3000/employees')
.then(res => res.json())
.then(data => {
employees = data;
console.log("Employees loaded:", employees);

// Auto-login from localStorage
const savedUser = localStorage.getItem("loggedInUser");
if (savedUser) {
currentUser = JSON.parse(savedUser);
showDashboard(currentUser);
}

// Login handler
document.getElementById("loginForm").addEventListener("submit", function (e) {
e.preventDefault();
const email = document.getElementById("email").value.trim();
const password = document.getElementById("password").value.trim();
const user = employees.find(u => u.email === email && u.password === password);
if (!user) return alert("Invalid credentials");

currentUser = user;
localStorage.setItem("loggedInUser", JSON.stringify(user));
showDashboard(user);
});
})
.catch(err => {
console.error("Failed to load employees:", err);
alert("Error loading employee data. Make sure JSON Server is running.");
});

// Show dashboard and update UI
function showDashboard(user) {
document.getElementById("loginSection").classList.add("d-none");
document.getElementById("dashboardSection").classList.remove("d-none");
document.getElementById("userName").textContent = user.name;

if (user.role === "admin") {
document.getElementById("adminControls").classList.remove("d-none");
} else {
document.getElementById("adminControls").classList.add("d-none");
}

if (user.role === "employee") {
document.getElementById("passwordChangeSection").classList.remove("d-none");
} else {
document.getElementById("passwordChangeSection").classList.add("d-none");
}

renderTable(employees);
showProfile(user);
}

// Show profile
function showProfile(user) {
document.getElementById("profileSection").innerHTML = `
<h5>Your Profile</h5>
<p><strong>Name:</strong> ${user.name}</p>
<p><strong>Email:</strong> ${user.email}</p>
<p><strong>Phone:</strong> ${user.phone}</p>
<p><strong>Emp ID:</strong> ${user.empId}</p>
`;
}

// Render employee table
function renderTable(data) {
const tbody = document.getElementById("employeeTableBody");
tbody.innerHTML = "";

data.forEach((emp, index) => {
const isSelf = currentUser.email === emp.email;
const isAdmin = currentUser.role === "admin";
if (!isAdmin && !isSelf) return;

const row = document.createElement("tr");
row.innerHTML = `
<td><span>${emp.name}</span><input class="form-control d-none" value="${emp.name}" ${!isAdmin ? "disabled" : "" }></td>
<td><span>${emp.email}</span><input class="form-control d-none" value="${emp.email}" ${!isAdmin ? "disabled" : "" }>
</td>
<td><span>${emp.phone}</span><input class="form-control d-none" value="${emp.phone}" ${!isAdmin ? "disabled" : "" }>
</td>
<td><span>${emp.empId}</span><input class="form-control d-none" value="${emp.empId}" ${!isAdmin ? "disabled" : "" }>
</td>
<td>
    ${isAdmin ? `
    <button class="btn btn-sm btn-warning" onclick="enableEdit(${index}, this)">Edit</button>
    <button class="btn btn-sm btn-success d-none" onclick="saveEdit(${index}, this)">Save</button>
    <button class="btn btn-sm btn-danger" onclick="deleteEmployee(${index})">Delete</button>
    ` : ""}
</td>
`;
tbody.appendChild(row);
});
}

// Enable edit
function enableEdit(index, btn) {
const row = btn.closest("tr");
const spans = row.querySelectorAll("span");
const inputs = row.querySelectorAll("input");
spans.forEach(span => span.classList.add("d-none"));
inputs.forEach(input => input.classList.remove("d-none"));
btn.classList.add("d-none");
btn.nextElementSibling.classList.remove("d-none");
}

// Save edit
function saveEdit(index, btn) {
const row = btn.closest("tr");
const inputs = row.querySelectorAll("input");
employees[index].name = inputs[0].value;
employees[index].email = inputs[1].value;
employees[index].phone = inputs[2].value;
employees[index].empId = inputs[3].value;
renderTable(employees);
}

// Delete employee
function deleteEmployee(index) {
if (!confirm("Are you sure?")) return;
employees.splice(index, 1);
renderTable(employees);
}

// Add employee (admin only)
document.getElementById("addForm")?.addEventListener("submit", function (e) {
e.preventDefault();
const newEmp = {
name: document.getElementById("newName").value,
email: document.getElementById("newEmail").value,
phone: document.getElementById("newPhone").value,
empId: document.getElementById("newEmpId").value,
password: "emp123",
role: "employee",
id: String(employees.length + 1)
};
employees.push(newEmp);
this.reset();
renderTable(employees);
});

// Search
document.getElementById("search").addEventListener("input", function () {
const query = this.value.toLowerCase();
const filtered = employees.filter(emp =>
emp.name.toLowerCase().includes(query) ||
emp.email.toLowerCase().includes(query) ||
emp.empId.toLowerCase().includes(query)
);
renderTable(filtered);
});

// Change password (for employee)
function changePassword() {
const newPassword = document.getElementById("newPassword").value.trim();
if (!newPassword) return alert("Password cannot be empty");

const userIndex = employees.findIndex(emp => emp.email === currentUser.email);
if (userIndex !== -1) {
employees[userIndex].password = newPassword;
currentUser.password = newPassword;

const userId = currentUser.id;
fetch(`http://localhost:3000/employees/${userId}`, {
method: "PUT",
headers: { "Content-Type": "application/json" },
body: JSON.stringify(currentUser)
})
.then(res => {
if (!res.ok) throw new Error("Failed to update password in backend");
return res.json();
})
.then(updated => {
currentUser = updated;
localStorage.setItem("loggedInUser", JSON.stringify(updated));
alert("Password updated successfully!");
document.getElementById("newPassword").value = "";
})
.catch(err => {
console.error(err);
alert("Error: " + err.message);
});
}
}

// Logout
function logout() {
localStorage.removeItem("loggedInUser");
location.reload();
}
*/



let employees = [];
let currentUser = null;

Promise.all([
fetch('http://localhost:3001/admin').then(res => res.json()),
fetch('http://localhost:3001/employees').then(res => res.json())
])
.then(([admins, employeeList]) => {
employees = employeeList;
const savedUser = localStorage.getItem("loggedInUser");
if (savedUser) {
currentUser = JSON.parse(savedUser);
showDashboard(currentUser);
}

document.getElementById("loginForm").addEventListener("submit", function (e) {
e.preventDefault();
const email = document.getElementById("email").value.trim();
const password = document.getElementById("password").value.trim();

const user = [...admins, ...employees].find(
u => u.email === email && u.password === password
);

if (!user) return alert("Invalid credentials");

currentUser = user;
localStorage.setItem("loggedInUser", JSON.stringify(user));
showDashboard(user);
});
})
.catch(err => {
console.error(err);
alert("Error loading data. Make sure JSON Server is running.");
});

function showDashboard(user) {
document.getElementById("loginSection").classList.add("d-none");
document.getElementById("dashboardSection").classList.remove("d-none");
document.getElementById("userName").textContent = user.name;

const isAdmin = user.role === "admin";
document.getElementById("adminControls").classList.toggle("d-none", !isAdmin);
document.getElementById("passwordChangeSection").classList.toggle("d-none", isAdmin);

showProfile(user);
renderTable(isAdmin ? employees : [user]);
}

function showProfile(user) {
document.getElementById("profileSection").innerHTML = `
<h5>Your Profile</h5>
<p><strong>Name:</strong> ${user.name}</p>
<p><strong>Email:</strong> ${user.email}</p>
<p><strong>Phone:</strong> ${user.phone}</p>
<p><strong>Emp ID:</strong> ${user.empId}</p>
`;
}

function renderTable(data) {
const tbody = document.getElementById("employeeTableBody");
tbody.innerHTML = "";

data.forEach((emp, index) => {
const row = document.createElement("tr");
row.innerHTML = `
<td><span>${emp.name}</span><input class="form-control d-none" value="${emp.name}"></td>
<td><span>${emp.email}</span><input class="form-control d-none" value="${emp.email}"></td>
<td><span>${emp.phone}</span><input class="form-control d-none" value="${emp.phone}"></td>
<td><span>${emp.empId}</span><input class="form-control d-none" value="${emp.empId}"></td>
<td>
    ${currentUser.role === "admin" ? `
    <button class="btn btn-sm btn-warning" onclick="enableEdit(${index}, this)">Edit</button>
    <button class="btn btn-sm btn-success d-none" onclick="saveEdit(${index}, this)">Save</button>
    <button class="btn btn-sm btn-danger" onclick="deleteEmployee(${emp.id})">Delete</button>
    ` : ""}
</td>
`;
tbody.appendChild(row);
});
}

function enableEdit(index, btn) {
const row = btn.closest("tr");
row.querySelectorAll("span").forEach(el => el.classList.add("d-none"));
row.querySelectorAll("input").forEach(el => el.classList.remove("d-none"));
btn.classList.add("d-none");
btn.nextElementSibling.classList.remove("d-none");
}

function saveEdit(index, btn) {
const row = btn.closest("tr");
const inputs = row.querySelectorAll("input");
const updatedEmp = {
...employees[index],
name: inputs[0].value,
email: inputs[1].value,
phone: inputs[2].value,
empId: inputs[3].value
};

fetch(`http://localhost:3001/employees/${updatedEmp.id}`, {
method: "PUT",
headers: { "Content-Type": "application/json" },
body: JSON.stringify(updatedEmp)
})
.then(res => res.json())
.then(data => {
employees[index] = data;
renderTable(employees);
});
}

function deleteEmployee(id) {
if (!confirm("Delete this employee?")) return;
fetch(`http://localhost:3001/employees/${id}`, { method: "DELETE" })
.then(() => {
employees = employees.filter(emp => emp.id !== id);
renderTable(employees);
});
}

document.getElementById("addForm")?.addEventListener("submit", function (e) {
e.preventDefault();
const newEmp = {
name: document.getElementById("newName").value,
email: document.getElementById("newEmail").value,
phone: document.getElementById("newPhone").value,
empId: document.getElementById("newEmpId").value,
password: "emp123",
role: "employee"
};

fetch("http://localhost:3001/employees", {
method: "POST",
headers: { "Content-Type": "application/json" },
body: JSON.stringify(newEmp)
})
.then(res => res.json())
.then(emp => {
employees.push(emp);
renderTable(employees);
this.reset();
alert("Employee added successfully.");
});
});

document.getElementById("search")?.addEventListener("input", function () {
const q = this.value.toLowerCase();
const filtered = employees.filter(emp =>
emp.name.toLowerCase().includes(q) ||
emp.email.toLowerCase().includes(q) ||
emp.empId.toLowerCase().includes(q)
);
renderTable(filtered);
});

function changePassword() {
const newPass = document.getElementById("newPassword").value.trim();
if (!newPass) return alert("Password required");

const idx = employees.findIndex(emp => emp.email === currentUser.email);
if (idx !== -1) {
const updatedUser = { ...employees[idx], password: newPass };
fetch(`http://localhost:3001/employees/${updatedUser.id}`, {
method: "PUT",
headers: { "Content-Type": "application/json" },
body: JSON.stringify(updatedUser)
})
.then(res => res.json())
.then(updated => {
employees[idx] = updated;
currentUser = updated;
localStorage.setItem("loggedInUser", JSON.stringify(updated));
alert("Password changed successfully.");
document.getElementById("newPassword").value = "";
});
}
}

function logout() {
localStorage.removeItem("loggedInUser");
location.reload();
}